import os
import numpy as np
import skrf as rf
import zva as vna 
from RsInstrument.RsInstrument import RsInstrument


vna_address = 'TCPIP0::169.254.136.107::inst0::INSTR'
experiement_name = 'vna_test'


def init_vna(address=vna_address):
    instr = RsInstrument(address, True, False)
    
    idn = instr.query_str('*IDN?')
    print("****************************************\n")
    print(f"\nHello, I am: '{idn}'")
    print(f'RsInstrument driver version: {instr.driver_version}')
    print(f'Visa manufacturer: {instr.visa_manufacturer}')
    print(f'Instrument full name: {instr.full_instrument_model_name}')
    print(f'Instrument installed options: {",".join(instr.instrument_options)}')
    print("****************************************\n")

def save_touchstone(freqs=None, meas=None, trace_definitions=None, experiement_name=experiement_name):
    num_ports = int(np.sqrt(len(meas[0]) / len(freqs[0]))) 

    freqs = freqs[0]
    folder_path = os.getcwd()    
    freq = rf.Frequency.from_f(freqs, unit='Hz')
    freq.unit = 'GHz'
    filename = 'snp_files'
    N = len(freq.f)
    os.makedirs(os.path.join(folder_path, filename), exist_ok=True)

    for inx, data in enumerate(meas[0]):
        S_para = np.array([[[s11,s12], [s21,s22]] for s11,s12,s21,s22 in zip(data[0],data[1],data[2],data[3])])
        
        touchstone_name = filename + f'_{experiement_name}_{inx+1:0{len(str(N))}d}'
        
        NW = rf.Network(s=S_para, frequency=freq, name = touchstone_name)
        NW.write_touchstone(filename = touchstone_name, 
                            dir = os.path.join(folder_path, filename), skrf_comment=False)
        print("saved trace to", os.path.join(folder_path, filename, touchstone_name))
        
    

def grab_data(address=vna_address, sweeps=1, channels=[1]):
    frequencies, measurements, trace_definitions = vna.read_traces(address=address, num_sweeps=sweeps, channels=channels)
    
    return frequencies, measurements, trace_definitions

if __name__ == '__main__':
    
    init_vna()
    freqs, meas, trace_definitions = grab_data(sweeps = 1, channels = [1])
    save_touchstone(freqs, meas, trace_definitions)
    


    






